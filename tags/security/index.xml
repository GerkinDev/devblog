<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Security on GerkinDev Devblog</title>
    <link>https://gerkindev.github.io/devblog/tags/security/</link>
    <description>Recent content in Security on GerkinDev Devblog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>©2023, All Rights Reserved</copyright>
    <lastBuildDate>Tue, 02 Feb 2021 00:16:48 +0100</lastBuildDate>
    
        <atom:link href="https://gerkindev.github.io/devblog/tags/security/index.xml" rel="self" type="application/rss+xml" />
    

      
      <item>
        <title>Setup the cluster&#39;s Audit Log</title>
        <link>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/01-audit-log/</link>
        <pubDate>Mon, 16 Nov 2020 02:35:47 +0100</pubDate>
        
        <atom:modified>Tue, 29 Mar 2022 13:34:49 +0200</atom:modified>
        <guid>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/01-audit-log/</guid>
        <description>References    &amp;nbsp; https://docs.kublr.com/logging/logging-api-audit/  &amp;nbsp; Logging in Kubernetes with Elasticsearch, Kibana, and Fluentd  &amp;nbsp; Auditing | Kubernetes     Note : Even if this part is not required, you should not ignore it on dev environment and should really really REALLY not skip it for production. In fact, it can contain useful debug informations and security traces to see what is going on in your kubernetes cluster, and even on your whole server(s).</description>
        
        <dc:creator>GerkinDev</dc:creator>
        
        
        
        
          
            
              <category>Kubernetes</category>
            
          
            
              <category>Sysadmin</category>
            
          
            
              <category>DevOps</category>
            
          
            
              <category>Monitoring</category>
            
          
            
              <category>Security</category>
            
          
        
        
          
            
              <category>Kubernetes</category>
            
          
        
        
      </item>
      
      <item>
        <title>Setup cluster&#39;s authentication</title>
        <link>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/07-authentication/</link>
        <pubDate>Mon, 16 Nov 2020 02:35:47 +0100</pubDate>
        
        <atom:modified>Tue, 29 Mar 2022 13:34:49 +0200</atom:modified>
        <guid>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/07-authentication/</guid>
        <description>Here is a graph of the RBAC setup we are going to implement:
1. Setup keycloak We&amp;rsquo;ll use keycloak to proxy our authentication for all monitors, using a single realm. You may use several realms in real-life situations. This is probably the tough part, and you may tweak heavily the following guide. Moreover, I may forgot to write some instructions, or somes are heavily linked to your very own setup.</description>
        
        <dc:creator>GerkinDev</dc:creator>
        
        
        
        
          
            
              <category>Kubernetes</category>
            
          
            
              <category>Sysadmin</category>
            
          
            
              <category>DevOps</category>
            
          
            
              <category>Web service</category>
            
          
            
              <category>Security</category>
            
          
            
              <category>Authentication</category>
            
          
        
        
          
            
              <category>Kubernetes</category>
            
          
        
        
      </item>
      
      <item>
        <title>Administrate the cluster with authentication</title>
        <link>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/08-kubernetes-user-management/</link>
        <pubDate>Mon, 16 Nov 2020 02:35:47 +0100</pubDate>
        
        <atom:modified>Tue, 29 Mar 2022 13:34:49 +0200</atom:modified>
        <guid>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/08-kubernetes-user-management/</guid>
        <description>Create the realm and the client   References    &amp;nbsp; engineering-notes/kubernetes-keycloak-integration.md at master · zufardhiyaulhaq/engineering-notes · GitHub    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  REALM_URL=&amp;#34;https://keycloak.{{cluster.baseHostName}}/auth/realms/{{apiServer.realmName}}&amp;#34; # Log in TOKEN_RESPONSE=&amp;#34;$(curl \  -d &amp;#34;grant_type=password&amp;#34; \  -d &amp;#34;client_id={{apiServer.clientId}}&amp;#34; \  -d &amp;#34;client_secret={{apiServer.clientSecret}}&amp;#34; \  -d &amp;#34;username=admin-user&amp;#34; \  -d &amp;#34;password=admin-user&amp;#34; \  $REALM_URL/protocol/openid-connect/token)&amp;#34; # Extract the access token ACCESS_TOKEN=&amp;#34;$(echo &amp;#34;$TOKEN_RESPONSE&amp;#34; | jq &amp;#39;.</description>
        
        <dc:creator>GerkinDev</dc:creator>
        
        
        
        
          
            
              <category>Kubernetes</category>
            
          
            
              <category>Sysadmin</category>
            
          
            
              <category>DevOps</category>
            
          
            
              <category>Security</category>
            
          
            
              <category>Authentication</category>
            
          
        
        
          
            
              <category>Kubernetes</category>
            
          
        
        
      </item>
      
      <item>
        <title>Protect monitoring with authentication</title>
        <link>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/09-safe-monitoring/</link>
        <pubDate>Mon, 16 Nov 2020 02:35:47 +0100</pubDate>
        
        <atom:modified>Tue, 29 Mar 2022 13:34:49 +0200</atom:modified>
        <guid>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/09-safe-monitoring/</guid>
        <description>Now that we have our authentication service up and running, we can protect our dashboards installed in the step &amp;nbsp;06 - Monitoring: See what is going on using our Keycloak OpenID Connect provider. Here is a diagram on how authorization will be managed:
Traefik dashboard TODO
Kibana TODO
Kube dashboard   References    &amp;nbsp; Protect Kubernetes Dashboard with OpenID Connect | by Hidetake Iwata | ITNEXT    Again, we are going to set up a new instance of &amp;nbsp;louketo-proxy.</description>
        
        <dc:creator>GerkinDev</dc:creator>
        
        
        
        
          
            
              <category>Kubernetes</category>
            
          
            
              <category>Sysadmin</category>
            
          
            
              <category>DevOps</category>
            
          
            
              <category>Web service</category>
            
          
            
              <category>Security</category>
            
          
            
              <category>Authentication</category>
            
          
        
        
          
            
              <category>Kubernetes</category>
            
          
        
        
      </item>
      
      <item>
        <title>CentOS8 Firewalld Tips</title>
        <link>https://gerkindev.github.io/devblog/blog/centos8-firewalld-tips/</link>
        <pubDate>Tue, 02 Feb 2021 00:16:48 +0100</pubDate>
        
        <atom:modified>Tue, 29 Mar 2022 13:34:49 +0200</atom:modified>
        <guid>https://gerkindev.github.io/devblog/blog/centos8-firewalld-tips/</guid>
        <description>When configuring firewall rules to be as strict as required, you may have some troubles understanding why something you thought was allowed is, actually, not. And to track down this kind of issues, some logs might help. Here is a small copy-pasta to enable firewalld logging.
Enable &amp;ldquo;Access Denied&amp;rdquo;   References    &amp;nbsp;How to enable firewalld logging for denied packets on Linux    firewalld can log events to rsyslog, the events journal in most linux distribution.</description>
        
        <dc:creator>GerkinDev</dc:creator>
        
        
        
        
          
            
              <category>Firewall</category>
            
          
            
              <category>Security</category>
            
          
            
              <category>Sysadmin</category>
            
          
            
              <category>Troubleshooting</category>
            
          
        
        
          
            
          
        
        
          
            
          
        
      </item>
      

    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Web service on GerkinDev Devblog</title>
    <link>https://gerkindev.github.io/devblog/tags/web-service/</link>
    <description>Recent content in Web service on GerkinDev Devblog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>©2022, All Rights Reserved</copyright>
    <lastBuildDate>Mon, 16 Nov 2020 02:35:47 +0100</lastBuildDate>
    
        <atom:link href="https://gerkindev.github.io/devblog/tags/web-service/index.xml" rel="self" type="application/rss+xml" />
    

      
      <item>
        <title>Setup the cluster&#39;s internal router</title>
        <link>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/03-router/</link>
        <pubDate>Mon, 16 Nov 2020 02:35:47 +0100</pubDate>
        
        <atom:modified>Tue, 29 Mar 2022 13:34:49 +0200</atom:modified>
        <guid>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/03-router/</guid>
        <description>References    &amp;nbsp; Add OpenAPI v3 schemas to CRDs by jrostand · Pull Request #157 · traefik/traefik-helm-chart · GitHub    Start by creating traefik required resources. You can directly use resources from the &amp;nbsp;kubernetes/traefik templates: it does not contain variables. Those are taken from &amp;nbsp;traefik docs mixed up with &amp;nbsp;this PR for kubernetes 1.19 support and schemas.
 Please look forward for &amp;nbsp;this issue in traefik about official v1.</description>
        
        <dc:creator>GerkinDev</dc:creator>
        
        
        
        
          
            
              <category>Kubernetes</category>
            
          
            
              <category>Sysadmin</category>
            
          
            
              <category>DevOps</category>
            
          
            
              <category>Networking</category>
            
          
            
              <category>Web service</category>
            
          
        
        
          
            
              <category>Kubernetes</category>
            
          
        
        
      </item>
      
      <item>
        <title>Make services reachable from the world</title>
        <link>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/04-reverse-proxy/</link>
        <pubDate>Mon, 16 Nov 2020 02:35:47 +0100</pubDate>
        
        <atom:modified>Tue, 29 Mar 2022 13:34:49 +0200</atom:modified>
        <guid>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/04-reverse-proxy/</guid>
        <description>Now that you have a router installed, you have to pass requests on your server to it. This setup use a single entry point directly binding some ports on the host server.
1. Make a static and previsible configuration As you may have noticed in the step &amp;nbsp;Kickstart the cluster, the metallb configuration use only dynamic adresses. But for the reverse proxy to work, we&amp;rsquo;ll need to be sure that our traefik router has a constant IP in your VPN.</description>
        
        <dc:creator>GerkinDev</dc:creator>
        
        
        
        
          
            
              <category>Kubernetes</category>
            
          
            
              <category>Sysadmin</category>
            
          
            
              <category>DevOps</category>
            
          
            
              <category>Networking</category>
            
          
            
              <category>Web service</category>
            
          
        
        
          
            
              <category>Kubernetes</category>
            
          
        
        
      </item>
      
      <item>
        <title>Setup cluster&#39;s authentication</title>
        <link>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/07-authentication/</link>
        <pubDate>Mon, 16 Nov 2020 02:35:47 +0100</pubDate>
        
        <atom:modified>Tue, 29 Mar 2022 13:34:49 +0200</atom:modified>
        <guid>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/07-authentication/</guid>
        <description>Here is a graph of the RBAC setup we are going to implement:
1. Setup keycloak We&amp;rsquo;ll use keycloak to proxy our authentication for all monitors, using a single realm. You may use several realms in real-life situations. This is probably the tough part, and you may tweak heavily the following guide. Moreover, I may forgot to write some instructions, or somes are heavily linked to your very own setup.</description>
        
        <dc:creator>GerkinDev</dc:creator>
        
        
        
        
          
            
              <category>Kubernetes</category>
            
          
            
              <category>Sysadmin</category>
            
          
            
              <category>DevOps</category>
            
          
            
              <category>Web service</category>
            
          
            
              <category>Security</category>
            
          
            
              <category>Authentication</category>
            
          
        
        
          
            
              <category>Kubernetes</category>
            
          
        
        
      </item>
      
      <item>
        <title>Protect monitoring with authentication</title>
        <link>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/09-safe-monitoring/</link>
        <pubDate>Mon, 16 Nov 2020 02:35:47 +0100</pubDate>
        
        <atom:modified>Tue, 29 Mar 2022 13:34:49 +0200</atom:modified>
        <guid>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/09-safe-monitoring/</guid>
        <description>Now that we have our authentication service up and running, we can protect our dashboards installed in the step &amp;nbsp;06 - Monitoring: See what is going on using our Keycloak OpenID Connect provider. Here is a diagram on how authorization will be managed:
Traefik dashboard TODO
Kibana TODO
Kube dashboard   References    &amp;nbsp; Protect Kubernetes Dashboard with OpenID Connect | by Hidetake Iwata | ITNEXT    Again, we are going to set up a new instance of &amp;nbsp;louketo-proxy.</description>
        
        <dc:creator>GerkinDev</dc:creator>
        
        
        
        
          
            
              <category>Kubernetes</category>
            
          
            
              <category>Sysadmin</category>
            
          
            
              <category>DevOps</category>
            
          
            
              <category>Web service</category>
            
          
            
              <category>Security</category>
            
          
            
              <category>Authentication</category>
            
          
        
        
          
            
              <category>Kubernetes</category>
            
          
        
        
      </item>
      

    
  </channel>
</rss>

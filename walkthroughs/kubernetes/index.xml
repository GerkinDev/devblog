<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Set up a bare-metal kubernetes cluster from scratch on GerkinDev Devblog</title>
    <link>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/</link>
    <description>Recent content in Set up a bare-metal kubernetes cluster from scratch on GerkinDev Devblog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>©2022, All Rights Reserved</copyright>
    <lastBuildDate>Mon, 16 Nov 2020 02:35:47 +0100</lastBuildDate>
    
        <atom:link href="https://gerkindev.github.io/devblog/walkthroughs/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    

      
      <item>
        <title>Setup the cluster&#39;s VPN</title>
        <link>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/00-vpn/</link>
        <pubDate>Mon, 16 Nov 2020 02:35:47 +0100</pubDate>
        
        <atom:modified>Tue, 29 Mar 2022 13:34:49 +0200</atom:modified>
        <guid>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/00-vpn/</guid>
        <description>References    &amp;nbsp; How To Run OpenVPN in a Docker Container on Ubuntu 14.04 | DigitalOcean  &amp;nbsp; Running Docker Containers with Systemd    Because we are installing our cluster bare metal on servers exposed on the Internet, we&amp;rsquo;ll need a way to secure all of our network traffic around the critical parts of kubernetes. To do so, we&amp;rsquo;ll use OpenVPN to create a virtual secured network where all of our nodes will work.</description>
        
        <dc:creator>GerkinDev</dc:creator>
        
        
        
        
          
            
              <category>Kubernetes</category>
            
          
            
              <category>Sysadmin</category>
            
          
            
              <category>DevOps</category>
            
          
            
              <category>Networking</category>
            
          
        
        
          
            
              <category>Kubernetes</category>
            
          
        
        
      </item>
      
      <item>
        <title>Setup the cluster&#39;s Audit Log</title>
        <link>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/01-audit-log/</link>
        <pubDate>Mon, 16 Nov 2020 02:35:47 +0100</pubDate>
        
        <atom:modified>Tue, 29 Mar 2022 13:34:49 +0200</atom:modified>
        <guid>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/01-audit-log/</guid>
        <description>References    &amp;nbsp; Kubernetes Audit with Elasticsearch and Kibana :: Kublr Documentation  &amp;nbsp; Logging in Kubernetes with Elasticsearch, Kibana, and Fluentd  &amp;nbsp; Auditing | Kubernetes     Note : Even if this part is not required, you should not ignore it on dev environment and should really really REALLY not skip it for production. In fact, it can contain useful debug informations and security traces to see what is going on in your kubernetes cluster, and even on your whole server(s).</description>
        
        <dc:creator>GerkinDev</dc:creator>
        
        
        
        
          
            
              <category>Kubernetes</category>
            
          
            
              <category>Sysadmin</category>
            
          
            
              <category>DevOps</category>
            
          
            
              <category>Monitoring</category>
            
          
            
              <category>Security</category>
            
          
        
        
          
            
              <category>Kubernetes</category>
            
          
        
        
      </item>
      
      <item>
        <title>Kickstart the cluster</title>
        <link>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/02-cluster/</link>
        <pubDate>Mon, 16 Nov 2020 02:35:47 +0100</pubDate>
        
        <atom:modified>Tue, 29 Mar 2022 13:34:49 +0200</atom:modified>
        <guid>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/02-cluster/</guid>
        <description>Create the cluster config file   References    &amp;nbsp; kubernetes - kubeadm init --apiserver-advertise-address flag equivalent in config file - Stack Overflow    We are now going to configure the cluster. For the sake of traceability, this configuration won&amp;rsquo;t be done via CLI flags, but via &amp;nbsp;a configuration file. The path of the cluster config file will later be referenced as the  {{cluster.configFile}}, and should be inside /etc/kubernetes.</description>
        
        <dc:creator>GerkinDev</dc:creator>
        
        
        
        
          
            
              <category>Kubernetes</category>
            
          
            
              <category>Sysadmin</category>
            
          
            
              <category>DevOps</category>
            
          
        
        
          
            
              <category>Kubernetes</category>
            
          
        
        
      </item>
      
      <item>
        <title>Setup the cluster&#39;s internal router</title>
        <link>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/03-router/</link>
        <pubDate>Mon, 16 Nov 2020 02:35:47 +0100</pubDate>
        
        <atom:modified>Tue, 29 Mar 2022 13:34:49 +0200</atom:modified>
        <guid>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/03-router/</guid>
        <description>References    &amp;nbsp; Add OpenAPI v3 schemas to CRDs by jrostand · Pull Request #157 · traefik/traefik-helm-chart · GitHub    Start by creating traefik required resources. You can directly use resources from the &amp;nbsp;kubernetes/traefik templates: it does not contain variables. Those are taken from &amp;nbsp;traefik docs mixed up with &amp;nbsp;this PR for kubernetes 1.19 support and schemas.
 Please look forward for &amp;nbsp;this issue in traefik about official v1.</description>
        
        <dc:creator>GerkinDev</dc:creator>
        
        
        
        
          
            
              <category>Kubernetes</category>
            
          
            
              <category>Sysadmin</category>
            
          
            
              <category>DevOps</category>
            
          
            
              <category>Networking</category>
            
          
            
              <category>Web service</category>
            
          
        
        
          
            
              <category>Kubernetes</category>
            
          
        
        
      </item>
      
      <item>
        <title>Make services reachable from the world</title>
        <link>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/04-reverse-proxy/</link>
        <pubDate>Mon, 16 Nov 2020 02:35:47 +0100</pubDate>
        
        <atom:modified>Tue, 29 Mar 2022 13:34:49 +0200</atom:modified>
        <guid>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/04-reverse-proxy/</guid>
        <description>Now that you have a router installed, you have to pass requests on your server to it. This setup use a single entry point directly binding some ports on the host server.
1. Make a static and previsible configuration As you may have noticed in the step &amp;nbsp;Kickstart the cluster, the metallb configuration use only dynamic adresses. But for the reverse proxy to work, we&amp;rsquo;ll need to be sure that our traefik router has a constant IP in your VPN.</description>
        
        <dc:creator>GerkinDev</dc:creator>
        
        
        
        
          
            
              <category>Kubernetes</category>
            
          
            
              <category>Sysadmin</category>
            
          
            
              <category>DevOps</category>
            
          
            
              <category>Networking</category>
            
          
            
              <category>Web service</category>
            
          
        
        
          
            
              <category>Kubernetes</category>
            
          
        
        
      </item>
      
      <item>
        <title>Make things persistent</title>
        <link>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/05-storage/</link>
        <pubDate>Mon, 16 Nov 2020 02:35:47 +0100</pubDate>
        
        <atom:modified>Tue, 29 Mar 2022 13:34:49 +0200</atom:modified>
        <guid>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/05-storage/</guid>
        <description>References    &amp;nbsp; Persistent Volumes | Kubernetes  &amp;nbsp; Dynamic Volume Provisioning | Kubernetes  &amp;nbsp; Storage Classes | Kubernetes  &amp;nbsp; Kubernetes Volumes explained | Persistent Volume, Persistent Volume Claim &amp;amp; Storage Class - YouTube    As you may know, docker (and thus, kubernetes) does not persist anything by default. That means that everytime you restart a pod (container), it is in the exact same state as it was at its first execution, except for the mount points.</description>
        
        <dc:creator>GerkinDev</dc:creator>
        
        
        
        
          
            
              <category>Kubernetes</category>
            
          
            
              <category>Sysadmin</category>
            
          
            
              <category>DevOps</category>
            
          
            
              <category>Storage</category>
            
          
        
        
          
            
              <category>Kubernetes</category>
            
          
        
        
      </item>
      
      <item>
        <title>Monitoring: See what is going on</title>
        <link>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/06-monitoring/</link>
        <pubDate>Mon, 16 Nov 2020 02:35:47 +0100</pubDate>
        
        <atom:modified>Tue, 29 Mar 2022 13:34:49 +0200</atom:modified>
        <guid>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/06-monitoring/</guid>
        <description>Well, things are getting real and are on the point to become quite complex. So we&amp;rsquo;ll setup (super unsafe) dashboards to see what is going on easily. After all, we have nothing critical for now, but we might get troubles soon. And, don&amp;rsquo;t worry, we&amp;rsquo;ll make it safe just after that.
1. Traefik dashboard: monitoring routes The traefik dashboard will help us in the diagnostics of our ingress routes and traefik-related stuff.</description>
        
        <dc:creator>GerkinDev</dc:creator>
        
        
        
        
          
            
              <category>Kubernetes</category>
            
          
            
              <category>Sysadmin</category>
            
          
            
              <category>DevOps</category>
            
          
            
              <category>Monitoring</category>
            
          
        
        
          
            
              <category>Kubernetes</category>
            
          
        
        
      </item>
      
      <item>
        <title>Setup cluster&#39;s authentication</title>
        <link>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/07-authentication/</link>
        <pubDate>Mon, 16 Nov 2020 02:35:47 +0100</pubDate>
        
        <atom:modified>Tue, 29 Mar 2022 13:34:49 +0200</atom:modified>
        <guid>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/07-authentication/</guid>
        <description>Here is a graph of the RBAC setup we are going to implement:
1. Setup keycloak We&amp;rsquo;ll use keycloak to proxy our authentication for all monitors, using a single realm. You may use several realms in real-life situations. This is probably the tough part, and you may tweak heavily the following guide. Moreover, I may forgot to write some instructions, or somes are heavily linked to your very own setup.</description>
        
        <dc:creator>GerkinDev</dc:creator>
        
        
        
        
          
            
              <category>Kubernetes</category>
            
          
            
              <category>Sysadmin</category>
            
          
            
              <category>DevOps</category>
            
          
            
              <category>Web service</category>
            
          
            
              <category>Security</category>
            
          
            
              <category>Authentication</category>
            
          
        
        
          
            
              <category>Kubernetes</category>
            
          
        
        
      </item>
      
      <item>
        <title>Administrate the cluster with authentication</title>
        <link>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/08-kubernetes-user-management/</link>
        <pubDate>Mon, 16 Nov 2020 02:35:47 +0100</pubDate>
        
        <atom:modified>Tue, 29 Mar 2022 13:34:49 +0200</atom:modified>
        <guid>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/08-kubernetes-user-management/</guid>
        <description>Create the realm and the client   References    &amp;nbsp; engineering-notes/kubernetes-keycloak-integration.md at master · zufardhiyaulhaq/engineering-notes · GitHub    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  REALM_URL=&amp;#34;https://keycloak.{{cluster.baseHostName}}/auth/realms/{{apiServer.realmName}}&amp;#34; # Log in TOKEN_RESPONSE=&amp;#34;$(curl \  -d &amp;#34;grant_type=password&amp;#34; \  -d &amp;#34;client_id={{apiServer.clientId}}&amp;#34; \  -d &amp;#34;client_secret={{apiServer.clientSecret}}&amp;#34; \  -d &amp;#34;username=admin-user&amp;#34; \  -d &amp;#34;password=admin-user&amp;#34; \  $REALM_URL/protocol/openid-connect/token)&amp;#34; # Extract the access token ACCESS_TOKEN=&amp;#34;$(echo &amp;#34;$TOKEN_RESPONSE&amp;#34; | jq &amp;#39;.</description>
        
        <dc:creator>GerkinDev</dc:creator>
        
        
        
        
          
            
              <category>Kubernetes</category>
            
          
            
              <category>Sysadmin</category>
            
          
            
              <category>DevOps</category>
            
          
            
              <category>Security</category>
            
          
            
              <category>Authentication</category>
            
          
        
        
          
            
              <category>Kubernetes</category>
            
          
        
        
      </item>
      
      <item>
        <title>Protect monitoring with authentication</title>
        <link>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/09-safe-monitoring/</link>
        <pubDate>Mon, 16 Nov 2020 02:35:47 +0100</pubDate>
        
        <atom:modified>Tue, 29 Mar 2022 13:34:49 +0200</atom:modified>
        <guid>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/09-safe-monitoring/</guid>
        <description>Now that we have our authentication service up and running, we can protect our dashboards installed in the step &amp;nbsp;06 - Monitoring: See what is going on using our Keycloak OpenID Connect provider. Here is a diagram on how authorization will be managed:
Traefik dashboard TODO
Kibana TODO
Kube dashboard   References    &amp;nbsp; Protect Kubernetes Dashboard with OpenID Connect | by Hidetake Iwata | ITNEXT    Again, we are going to set up a new instance of &amp;nbsp;louketo-proxy.</description>
        
        <dc:creator>GerkinDev</dc:creator>
        
        
        
        
          
            
              <category>Kubernetes</category>
            
          
            
              <category>Sysadmin</category>
            
          
            
              <category>DevOps</category>
            
          
            
              <category>Web service</category>
            
          
            
              <category>Security</category>
            
          
            
              <category>Authentication</category>
            
          
        
        
          
            
              <category>Kubernetes</category>
            
          
        
        
      </item>
      
      <item>
        <title>Scaling up</title>
        <link>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/10-scaling-up/</link>
        <pubDate>Sun, 22 Nov 2020 04:03:47 +0100</pubDate>
        
        <atom:modified>Tue, 29 Mar 2022 13:34:49 +0200</atom:modified>
        <guid>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/10-scaling-up/</guid>
        <description>Your setup is running, everything runs smoothly, and suddenly, ‼️ nothing is responding: your cluster is overloaded.
Well, I hope you&amp;rsquo;ll expand your cluster capacity before it happens. It&amp;rsquo;s always really bad and stressful to do maintenance because of downtime.
Hopefully, here comes the real huge advantage of kubernetes: it is meant to scale, up, and down. So, assuming you have followed the full guide so far, let&amp;rsquo;s review together how to add some juice to our cluster ⚡.</description>
        
        <dc:creator>GerkinDev</dc:creator>
        
        
        
        
          
            
              <category>Kubernetes</category>
            
          
            
              <category>Sysadmin</category>
            
          
        
        
          
            
              <category>Kubernetes</category>
            
          
        
        
      </item>
      

    
  </channel>
</rss>
